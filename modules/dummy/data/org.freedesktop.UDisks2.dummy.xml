<!DOCTYPE node PUBLIC
"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node name="/" xmlns:doc="http://www.freedesktop.org/dbus/1.0/doc.dtd">

<!--
 Copyright (C) 2014 Tomas Bzatek <tbzatek@redhat.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General
 Public License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 Boston, MA 02111-1307, USA.
-->

  <!-- ********************************************************************** -->

  <!--
    org.freedesktop.UDisks2.Drive.Dummy:
    @short_description: Dummy interface exported on disk objects

    Objects implementing this interface also implement the
    #org.freedesktop.UDisks2.Drive interface.
  -->
  <interface name="org.freedesktop.UDisks2.Drive.Dummy">
    <!-- Hello: Contains a hello message. -->
    <property name="Hello" type="s" access="read"/>

    <!--
        SayHello:

        Says hello.
    -->
    <method name="SayHello">
      <arg name="hello" direction="out" type="s"/>
    </method>

    <!--
        HelloSaid:
        @success: If %TRUE, the hello was said successfully.
        @message: A message containing the hello sequence.

        Emitted two seconds after the SayHello method has been called.
    -->
    <signal name="HelloSaid">
      <arg name="success" type="b"/>
      <arg name="message" type="s"/>
    </signal>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.DummyBlock:
      @short_description: Dummy interface exported on block objects

      This interface is used for #org.freedesktop.UDisks2.Block
      devices that has been filtered through the dummy plugin.
  -->
  <interface name="org.freedesktop.UDisks2.DummyBlock">
    <!-- prereq: org.freedesktop.UDisks2.Block -->

    <!-- have_nonsense: Indicates whether the nonsense has been created.  -->
    <property name="have_nonsense" type="b" access="read"/>

    <!--
        CreateNonsense:
        @name: The name of the nonsense to create.

        Creates a nonsense.
    -->
    <method name="CreateNonsense">
      <arg name="name" direction="in" type="s"/>
    </method>

    <!--
        NonsenseCreated:
        @success: If %TRUE, the nonsense was created successfully.
        @message: A message containing the name of the nonsense.

        Emitted two seconds after the CreateNonsense method has been called.
    -->
    <signal name="NonsenseCreated">
      <arg name="success" type="b"/>
      <arg name="name" type="s"/>
    </signal>
  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.DummyLoop:
      @short_description: A global loop object covering all loop block devices

      This interface should appear on a separate object exported on the
      master UDisks2 root.
  -->
  <interface name="org.freedesktop.UDisks2.DummyLoop">

    <property name="num_devices" type="i" access="read"/>

  </interface>

  <!-- ********************************************************************** -->

  <!--
      org.freedesktop.UDisks2.DummyManager:
      @short_description: Dummy manager interface that lets you create wonders

      This interface is meant as a supplement to the /org/freedesktop/UDisks2/Manager
      object manager. Typically serves the purpose of creating new objects/devices
      etc. of a specified type. E.g. new RAID arrays, LVM2 volume groups, etc.
  -->
  <interface name="org.freedesktop.UDisks2.DummyManager">

    <!--
        CreateLoopPool:
        @name: The name of the pool to create.

        Creates a loop pool (bogus).
    -->
    <method name="CreateLoopPool">
      <arg name="name" direction="in" type="s"/>
    </method>

  </interface>

  <!-- ********************************************************************** -->

</node>
